<브라우저 객체 모델>

웹 브라우저와 관련된 객체의 집합이다.
대표적으로 window(최상위 객체), location, navigator, history, screen, document 객체가 있다.

  1)window객체
     -브라우저의 내장 객체 중 최상위 객체
     -모든 전역 객체, 함수, 변수는 자동적으로 window 객체에 속함
     -모든 전역 변수는 window 객체의 속성이 됨
     -모든 전역 함수는 window 객체의 메서드가 됨
     -window를 생략한 형태로 window 객체와 메서드를 사용 가능
     -적용하기 위한 공식적인 표준은 없으나, 주요 브라우저들에서 지원되고 있음

     ex) 
       var x=10;
       window.alert(window.x);
 
     ex1)
        window.open('http://naver.com', 'win1', 'width=600, height=300');

        *옵션 정리
          location  (yes,no,1,0)  =>주소 입력창의 유무
          menubar (yes,no,1,0)  =>메뉴의 유무
          resizable  (yes,no,1,0)  =>화면 크기 조절 유무
          status     (yes,no,1,0)  =>상태표시줄 유무
          toolbar   (yes,no,1,0)  =>툴바 유무
          left , top                  =>윈도우의 위치값

     ex2)
        var child = window.open('', 'win1', 'width=300, height=200, resizable=no');
        if(child){
           child.document.write('<h1>From Parent Window</h1>');
        }else{
           alert('팝업 차단을 해제해 주세요.');
        }

     ex3)3초 후에 창 닫기  
       window.onload = function () {  // 윈도우가 로드될 때
           alert('3초후 이 페이지는 종료됩니다.');
           
           window.setTimeout(function () { // 3초 후에 함수를 1회 실행합니다.
               window.close();
           }, 3000);
       };

      * window.onload = function () {    //웹브라우저의 모든 객체가 로드 되었을때 함수를 실행
                alert('Hello Window .. !');
         };     

     ex4)센터 팝업(400/400의 크기)

            var winX , winY;
            
            winX = (screen.availWidth - 400)/2; 
            winY = (screen.availHeight - 400)/2; 

            var features = 'width=400,height=400,left=' + winX + ',top=' + winY; 
            window.open('http://naver.com', 'pop1', features) ;
       

----------------------------------------------------------------------
  2) screen 객체
    -운영체제의 화면에 대한 정보를 가지고 있는 객체
    - window 객체의 한 부분으로써 window.screen.속성을 통해 접근
    - window는 생략 가능
    - 방문자의 화면을 고려해 적당한 사이즈의 팝업창을 제공 가능

    ex1)브라우저 크기에 맞춰지는 윈도우
       var child = window.open('http://naver.com', 'win1', 'width=300, height=200');
       var width = screen.width;

       var height = screen.height;
       child.moveTo(0, 0);
       child.resizeTo(width, height);

------------------------------------------------------------------
  3)location 객체
     -현재 URL에 대한 정보를 가지고 있는 객체
     -window 객체의 한 부분으로써 window.location 속성을 통해 접근
     -window는 생략 가능

     ex1)
         location='http://naver.com';
         location.href='http://nate.com';
         location.replace('http://daum.net');

         *페이지 새로고침 =>  location.reload();   또는  location.href=location.href;
-----------------------------------------------------------------
  4)navigator 객체
    -웹 문서를 실행하고 있는 브라우저에 대한 정보를 가지고 있는 객체
    -window 객체의 한 부분으로써 window.navigator 속성을 통해 접근
    -window는 생략 가능

    ex1)
      var infoBrowser;
      infoBrowser = '브라우저의 이름 : ' + navigator.appName + '\n\n';
      infoBrowser += '브라우저의 코드명 : ' + navigator.appCodeName + '\n\n';
      infoBrowser += '브라우저의 버전 : ' + navigator.appVersion + '\n\n';
      infoBrowser += '운영체제 환경 : ' + navigator.platform;
      infoBrowser += '자바 사용 여부 : ' + navigator.javaEnabled();

      alert(infoBrowser);

---------------------------------------------------------------
   5)history 객체
       -브라우저 방문 기록(history)에 대한 정보를 가지고 있는 객체
       - window 객체의 한 부분으로써 window.history 속성을 통해 접근
       - window는 생략 가능
       - 사용자들의 사생활을 보호하기 위해, JavaScript를 통해 접근하는데 제한이 있음

     back()  => 히스토리 리스트 안에서 이전 URL 로드(브라우저의 “뒤로 가기” 버튼 클릭)
     forward() => 히스트로 리스트 안에서 다음 URL 로드(브라우저의 “앞으로 가기” 버튼 클릭)
     go()  =>  히스토리 리스트의 특정 URL로 이동

=======================================================================

 * DOM(document Object Model) => 문서객체모델

   - 문서에 접근하기 위한 표준으로, W3C (World Wide Web Consortium)에서 정의
   - Core DOM, XML DOM, HTML DOM으로 나뉘어짐
   - 웹 문서를 로드할 때, 브라우저는 구성 요소들을 객체화하여 트리 구조의 DOM을 생성
   - HTML DOM은 HTML 구성요소들을 획득, 변경, 추가, 삭제하기 위한 표준
   - HTML 문서를 브라우저에서 로드 시 각 구성요소들을 객체화하여 객체 트리 구조를 나타냄


  6)document 객체   
   - HTML 문서와 관련있는 객체
   - window 객체의 핚 부분으로써 window.document 속성을 통해 접근
   - window는 생략 가능
   - 좁은 의미의 문서 객체 모델 : document 객체와 관련된 객체의 집합
   - 로드된 문서에 단 하나의 document 객체 존재
   - HTML 문서 객체 접근의 시발점


   *노드(계층) => 요소노드(태그의 계층) 와 텍스트노드(텍스트)로 구분됨.

   ex1)
      window.onload = function () {
            var header = document.createElement('h1');
            var textNode = document.createTextNode('DOM-document Object Model');
            // 노드를 연결합니다.
            header.appendChild(textNode);
            document.body.appendChild(header);
        };

       *createElement(tagName) =>요소 노드를 생성
        createTextNode(text)  => 텍스트 노드 생성
        appendChild(node)  => 객체에 노드 연결

   ex2)문서 객체의 innerHTML 속성 => 해당요소에 자식으로 문자화된 태그를 실제 html로 처리해주는 속성
       window.onload = function () {
            var output = '';
            output += '<ul>';
            output += ' <li>JavaScript</li>';
            output += ' <li>jQuery</li>';
            output += ' <li>Ajax</li>';
            output += '</ul>';
            document.body.innerHTML = output;
            document.body.innerHTML += '<h2>document 객체</h2>';
        };

    ex2-1)배열과 반복문을 사용한 태그의 생성
 
    window.onload = function () {  
        var output = '';
        var arr=['html','css', 'javascript', 'php', 'sql'];

        output += '<ul>';
        
        for(var i=0; i<arr.length ; i++){
            output += '<li>'+ arr[i]  +'</li>';
        }

        output += '</ul>';
        document.body.innerHTML += output;
     };

    ex2-2) write() 메서드 

           document.write('<h1>웹사이트 제작</h1>');
           document.write('<p>웹사이트 제작를 제작해 봅시다</p>');
     
      -------------------------
   *요소에 접근하기

   -하나의 요소 노드를 리턴하는 메서드
     getElementById('id')   -> 가장 많이 사용
     querySelector('css선택자') -> ie8부터 지원, 일치하는 요소들중 첫번째 요소만 리턴한다.  ex)querySelector('li.hot')
      
   -하나 혹은 그 이상의 요소를 리턴하는 메서드
     getElementsByClassName('클래스명')  -> ie9부터 지원
     getElementsByName('name값')
     getElementsTagName('태그명') 
     querySelectorAll('css선택자') => ie8부터 지원


   ex3)문서 객체 가져오기  getElementById(id명) *****
       <script type="text/javascript">
          window.onload = function () {
            var header1 = document.getElementById('header_1');
            var header2 = document.getElementById('header_2');

            // 문서 객체의 속성을 변경합니다.
            header1.innerHTML = '첫번째 타이틀 입니다';
            header2.innerHTML = '두번째 계층의 타이틀 입니다';
           };
      </script>
      ------------------------
      <body>
         <h1 id="header_1">Heading 1</h1>
         <h2 id="header_2">Heading 2</h2>
      </body>

    ex3)
     window.onload = function () {
            var header1 = document.getElementById('header_1');
            var header2 = document.getElementById('header_2');

            var output = '';
            var arr=['html','css', 'javascript', 'php', 'sql'];

            output += '<ul>';
            
            for(var i=0; i<arr.length ; i++){
                output += '<li><a href="./sub1/sub1_'+ (i+1) +'.html">'+ arr[i]  +'</a></li>';
            }

            output += '</ul>';

            //alert(typeof(header1));

            // 문서 객체의 속성을 변경합니다.
            header1.innerHTML = output;
            header2.innerHTML = '두번째 계층의 타이틀 입니다';

            //header1.write('첫번째 타이틀 입니다');
            //header2.write('두번째 계층의 타이틀 입니다');
    };



    ex3-1) querySelector('css선택자') 
      window.onload = function () {
          var head1 = document.querySelector('#head1');
	  var head2 = document.querySelector('.head2');
      
	  head1.innerHTML ='GOOD DAY';
	  head2.innerHTML ='HAPPY DAY';
      }
      ------------------
      <h3 id="head1">좋은날</h3>
      <h3 class="head2">행복한날</h3>

  
    ex4) getElementsByTagName(태그명)
       <script type="text/javascript">
          window.onload = function () {
            var headers = document.getElementsByTagName('h2');
            headers[0].innerHTML = '두번째 타이틀 1입니다';
            headers[1].innerHTML = '두번째 타이틀 2입니다';
          };
       </script>
       ------------------------
       <body>
          <h2>Heading 2</h2>
          <h2>Heading 2</h2>
       </body>

    ex4-1)getElementsByName('name값')
     <script>
       window.onload = function () {
          var check = document.getElementsByName('check');
          document.body.innerHTML +='가져온 문서 객체의 수 : ' + check.length;
       }
    </script> 
    -----------
    <input name="check" type="button" value="봄" />
    <input name="check" type="button" value="여름" />

-------------------------------------------------------------------


    ex5) 문서 객체의 스타일 조작 ***
       window.onload = function () {
            var header = document.getElementById('header');
            // 문서 객체의 스타일을 바꿔줍니다.
            header.style.border = '2px Solid Black';
            header.style.color = 'Orange';
            header.style.fontFamily = 'Helvetica';
            header.style.backgroundColor='#0f0';
            header.style.fontSize='100px';
        };
       ----------------------
        <h1 id="header">Header01</h1>

    ex5-1)
     window.onload = function () {
            var header = document.getElementById('header');
            // 문서 객체의 스타일을 바꿔줍니다.
            header.style['border'] = '2px Solid Black';
            header.style['color'] = '#fff';
            header.style['font-family'] = 'Helvetica';
            header.style['background-color']='#00f';
            header.style['font-size']='50px';
        };
      ----------------------
        <h1 id="header">Header01</h1>


    ex6) 문서 객체 제거  removeChild(child)
        -HTML 요소가 객체화된 문서 객체 제거
        -부모 노드로 이동하여 부모 노드에서 자식 노드 삭제


         window.onload = function () {
            var willRemove = document.getElementById('will_remove');
            // 문서 객체를 제거합니다.
            document.body.removeChild(willRemove);
        };
        --------------------------
       <h1 >자바스크립트&제이쿼리</h1>
       <p id="will_remove">자바스크립트로 동적인 웹 사이트를 구현해 보자.</p> 

    ex7) 현재시간 표시
       window.onload = function () {
            var clock = document.getElementById('clock');
            // 매 1초마다 함수를 실행합니다.
            setInterval(function () {
                var now = new Date();
                clock.innerHTML = now.toString();
            }, 1000);
        };
        ----------------------------
        <h2>시계</h2>
        <div id="clock"></div>

     ex7-1)
     window.onload = function () {
    
        var clock = document.getElementById('clock');
            // 매 1초마다 함수를 실행합니다.
        var h,m,s;

        clock.style.fontSize='50px';
        clock.style.color='red';

        function clock1(){
            var now = new Date();

            h = now.getHours();
            m = now.getMinutes();
            s = now.getSeconds();

            clock.innerHTML = h+':'+m+':'+s;
        }

        setInterval(clock1 , 1000);
      
    }


    ex8) 레이어 팝업 만들기(추가 예제)

    ex9) 아이프레임 높이 유동 처리(추가 예제)