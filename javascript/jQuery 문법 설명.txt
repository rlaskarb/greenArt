<jQuery>

-자바스크립트로 만들어 놓은 자바스크립트 라이브러리!
-코드를 짧고..간소화..쉽게...문법을 구성한다
-모든  자바스크립트 문법을 jQuery로 만들어 놓지 않음..
     -자바스크립트 + jQuery
-자바스크립트 코드는 웹 브라우저에 탑재!!
-자바스크립트 라이브러리(jQuery)는 웹 브라우저에 탑재되어있지 않다!!
-jQuery를 사용하기 위해서는 라이브러리 파일(jQuery문법들이 만들어져있다)을 연결해서 사용해야한다
        -하나의 html페이지에는 꼭!!! 하나의 라이브러리 파일을 연결해서 사용해야 한다. (충돌!!)
        -https://jquery.com/ (공식사이트) 
        -https://releases.jquery.com/jquery/       -> 사용할 라이브러리 파일을 다운받는다
            -jquery-1.12.4.min.js     (사용버전)
            -jquery-migrate-1.4.1.min.js (동일 버전별 호환)
-html 파일에 연결하는 방법
  1)<head>태그에 연결
    <script src="./js/jquery-1.12.4.min.js"></script>
    <script src="./js/jquery-migrate-1.4.1.min.js"></script>
    <script>
        $(document).ready(function(){  //가장 마지막에 계산
             //처리코드;
        });
    </script>

 2)body태그 하단에 연결하는 방법
    <script src="./js/jquery-1.12.4.min.js"></script>
    <script src="./js/jquery-migrate-1.4.1.min.js"></script>
    <script>
             //처리코드;
    </script>

-----------------------------------------------
<jQuery의 활용 문법>

-$('선택자').메소드();
-$('선택자') -> css에서 사용하는 선택자를 모두 사용할 수 있다. 
-jQuery의 메소드()들은 체이닝 기법을 사용할 수 있다.
      $('선택자').메소드().메소드().메소드();

1)다양한 선택자 호출 방법(태그 부르는 방법)
   -$('선택자')
        -$('태그명) , $('#아이디명'),  $('.클래스명') 
        -$('부모태그 자식태그'),  $('태그명, 태그명'), $('부모태 > 직계자식태그명') , $('*') 
   -$('선택자:필터선택자')
        -$('선택자:first')    -> 첫번째 요소
          $('선택자').frist()    -> 첫번째 요소
        -$('선택자:last')    -> 마지막 요소
          $('선택자').last()    -> 마지막 요소
        -$('선택자:odd')    -> 홀수번째 요소 (0부터 카운트)
        -$('선택자:even')    -> 짝수번째 요소 (0부터 카운트)
        -$('선택자:eq(순서)')    -> 원하는 순서의 요소 (0부터 카운트)
          $('선택자').eq(순서)    -> 원하는 순서의 요소 (0부터 카운트)
        -$('선택자:nth-child(순서)') -> 원하는 순서의 요소 (1부터 카운트)

2)태그를 불러서 css속성을 변경하는 방법 -> css() 메소드
   -$('선택자').css('css속성' , '값');
   -$('선택자').css('css속성' , '값').css('css속성' , '값').css('css속성' , '값');
   -$('선택자').css({
           'css속성' : '값',
           'css속성' : '값',
           'css속성' : '값'
     });

3)태그의 속성을 변경하는 방법 -> attr()함수
        -$('선택자').attr('태그의속성', '바꿀값');
        -$('선택자').attr('태그의속성' , '값').css('태그의속성' , '값').attr('태그의속성' , '값');
        -$('선택자').attr({
           '태그의속성' : '값',
           '태그의속성' : '값',
           '태그의속성' : '값'
       });
          
4)태그에 class를 추가 / 제거 하는 방법
        -$('선택자').addClass('클래스명');  -> class를 추가
        -$('선택자').removeClass('클래스명');  -> class를 제거
        -$('선택자').removeClass('제거할클래스명').addClass('바꿀클래스명'); ->class명을 변경

5)태그와 텍스트의 생성
       -$('선택자').html('<태그>텍스트</태그>');   -> 태그를 생성 (덮어쓰기)
       -$('선택자').text('텍스트');   -> 텍스트를 생성
            -var 변수 = $('선택자').text();  //해당 태그의 텍스트를 추출할 수 있다

6)태그의 생성 - 기존 태그에 추가할 수 있다
       -$('선택자').append('<태그>텍스트</태그>');  -> 선택된 태그에 자식으로 태그를 추가 (아랫부분)
       -$('선택자').prepend('<태그>텍스트</태그>'); -> 선택된 태그에 자식으로 태그를 추가 (윗부분)

7)태그의 제거/삭제
       -$('선택자').remove();   -> 해당 선택된 태그를 삭제(모든 자식태그도 삭제)
       -$('선택자').empty();   -> 해당태그의 모든 자식태그를 삭제

8) $('선택자').is() 메소드
     - $('선택자').is('.클래스명')   /  $('선택자').is('#아이디명')
     -선택된 태그가  해당 클래스나 아이디를 가지고 있는지를 판별한다 
     -해당 클래스나 아이디를 가지고 있으면 -> true  / 없으면 -> false
      -if()문의 조건절로 사용한다

   $('선택자').hasClass() 메소드
     - $('선택자').hasClass('클래스명')
     -선택된 태그가  해당 클래스를 가지고 있는지를 판별한다 
     -해당 클래스나 아이디를 가지고 있으면 -> true  / 없으면 -> false
     -if()문의 조건절로 사용한다

9) $('선택자').each() 메소드
     -선택된 태그들을 순서대로 각각 접근할 수 있다. (태그의 반복문 처럼 사용된다)
     -$('선택자').each( function(index){   // index-> 0 1 2 3 4 ....
             $(this).click(function(){   //각각의 선택된 태그를 클릭하면...
                     //처리코드
             });
       });
     -index 매개변수에 선택된 태그들의 번호(0~)가 자동 할당된다

10) jQuery 이벤트 바인딩(연결) 방법
     -bind() 메소드 사용
          $(선택자).bind('event', function(){ //처리코드 });
     -on() 메소드 사용 (권장)
          $(선택자).on('event', function(){ //처리코드 });
     -click() 메소드  -> click을 포함한 모든 이벤트들을 메소드로 만들어 놓았음!!
          $(선택자).click(function(){ //처리코드 });
     -toggle() 메소드 
          -두가지 상황이 교대로 바뀌는 결과를 만들어 주는 메소드
          -처리 이벤트는 click 이벤트로 설정되어있다
          -$(선택자).toggle(function(){//홀수번째 클릭.. }  ,  function(){//짝수번째 클릭.. }); 
    -hover() 메소드
          -처리 이벤트는 mouseenter(마우스오버) / mouseleave(마우스아웃) 이벤트로 설정되어있다
          -$(선택자).hover(function(){//마우스오버.. }  ,  function(){//마우스아웃.. }); 

    *이벤트의 제거
        $('선택자').off('이벤트');

11) $() 의 매개변수
      -$('선택자') 
      -$('선택자', this) -> 두번째 매개변수로 this를 사용하면.. 
                                     범위를 이벤트 발생 객체로 한정한다 (해당 이벤트 발생 태그의 자식!!!)

12) 애니메이션
    1) 기본적인 시각적 효과
        -해당 태그를 보이게 ->  $('선택자').css('display','block');
        -해당 태그를 보이게 ->  $('선택자').css('display','none');

        -$('선택자').show();   -> $('선택자').css('display','block'); -> 펼쳐지는 애니메이션(투명도)
          $('선택자').hide();    -> $('선택자').css('display','none');
        -$('선택자').slideDown();  -> $('선택자').css('display','block');  -> 위/아래로 펼쳐지는..
          $('선택자').slideUp();      -> $('선택자').css('display','none');
        -$('선택자').fadeIn();       -> $('선택자').css('display','block');   -> 투명도처리..
          $('선택자').fadeOut();    -> $('선택자').css('display','none');

        -속도를 추가할 수 있다  
          $('선택자').show(속도);
          $('선택자').show('slow'); -> slow/normal/fast/1000(1초)  
          $('선택자').hide(1000);

        -가속도 효과(easing)를 줄 수 있다 (32가지의 속도를 줄 수 있다)
          <script src="./js/jquery.easing.1.3.js"></script>  파일을 연결한다
          $('선택자').show(속도, easing);
          $('선택자').slideDown(1000,'easeOutBounce');
        
        -callback 함수 사용
          callback 함수는 애니메이션이 모두 처리된 후 자동으로 호출되는 함수
          $('선택자').show(속도, easing, function(){ //처리코드   });
          *오버/아웃 시 -> 애니메이션 계산을 멈추는 방법
             $('선택자').show(속도, easing, function(){ $(this).stop();  });


  2. 사용자 지정 효과  animate()메소드
      -변경되는 값까지의 중간 단계의 애니메이션을 부드럽게 만들어 준다 (tween)
      $(selector).animate({속성:변경할값 , 속성:변경할값});   //변하는 속성값
                    - top, left, right, bottom  -> 위치이동  (position속성이 지정되어 있어야한다)
                    - width, height -> 크기
                    - opacity -> 투명도     
      $(selector).animate({속성:변경할값 , 속성:변경할값}, speed);  // slow/normal/fast/1000(1초)  
      $(selector).animate({속성:변경할값 , 속성:변경할값}, speed, easing); //32가지 가속도
      $(selector).animate({속성:변경할값 , 속성:변경할값}, speed, easing, callback);  // callback 함수
 
      -애니메이션 지연 -> delay(지연시간) 
          $(selector).delay(2000).animate();
      -애니메이션에서 사용되는 계산값이  큐에 지속적으로 쌓인다.. 삭제(처리)하는 방법
           $(selector).animate().clearQueue(); 

      *투명도를 처리하는 애니메이션
        $(selector).fadeTo('속도', 투명도값);

  3.자바스크립트(jQuery)와 css 속성의 transition과의 콜라보!!!
      -css에서  transition을 해당 태그에 적용한다  => 클래스가 변경될 때 도 애니메이션이 작동!!!
      -임의의 클래스를 만들어서 태그의 속성값을 변경한다
      -jQuery 에서 원하는 이벤트를 연결하고 .addClass('클래스명') / .removeClass('클래스명');

13)이벤트 처리시 .. <a href="#"> 처리 방법
      -href="#"   => 스크롤을 최상단으로 이동..!
      - $('a').click(function(e){
                 e.preventDefault();   // href 속성을 막아주는 역할~~
                    //처리코드
         });

14)해당 이벤트 동작 시 index를 강제로 추출하는 방법
     $('선택자').click(function(e){
              e.preventDefault();
              var ind = $(this).index('선택자');    //클릭 시 해당 버튼의 index(0~)번호를 리턴
              //처리코드
    });

15) jQuery DOM 메소드
      - .children('선택자')  -> 직계자식(아들)
      - .find('선택자') -> 자식/자손 

      - .parent('선택자') -> 직계부모(아부지)
      - .parents('선택자')  -> 부모/조상

      - .next('선택자') -> 동일한 계층에 있는(형제) 나 바로 다음에 나오는 형제
      - .nextAll('선택자') -> 동일한 계층에 있는(형제) 나 바로 다음에 나오는 모든 형제

      - .prev('선택자') -> 동일한 계층에 있는(형제) 나 바로 이전에 나오는 형제
      - .prevAll('선택자') -> 동일한 계층에 있는(형제) 나 바로 이전에 나오는 모든 형제

      - .siblings('선택자') -> 동일한 계층에 있는(형제) 나를 제외한 모든 형제

16) 경로의 기준은 어디??
     -html 파일 작업 시 경로의 기준 -> html 파일이 저장된 위치가 기준
     -css 파일 작업 시 경로의 기준 -> css 파일이 저장된 위치가 기준
     -js 파일 작업 시 경로의 기준 -> js 파일을 불러들인 html파일이 저장된 위치가 기준 ***
  

17) 자동기능 만들기 / 정기기능 만들기

   function 함수명(){
        //처리코드
   }

   var 변수 = setInterval(함수명, 시간);   //  시간(1000->1초)
   clearInterval(변수);  //setInterval()함수를 강제로 멈춘다

18) 해당 태그의 너비/높이/개수를 알고 싶을 때!!
      var 변수 = $('선택자').size();   //태그의 개수를 리턴한다
      var 변수 = $('선택자').width();  //태그의 너비를 리턴한다
      var 변수 = $('선택자').height();  //태그의 너비를 리턴한다

19)스크롤 처리 (스크롤 이벤트)

    $(window).on('scroll',function(){     //스크롤의 거리가 발생하면
           var scroll = $(window).scrollTop();   //스크롤의 top쪽 거리

    });

20) <a> / <button> 태그의 포커스 처리 이벤드
    -포커스를 받을 때
     $('a').on('focus', function(){  //처리코드    });

   -포커스를 잃을 때
    $('a').on('blur', function(){  //처리코드    });

21) <a>태그 클릭 시 -> 해당 위치로 스크롤을 부드럽게 이동 시키는 방법
      - $('html,body').stop().animate({'scrollTop':이동할 위치값}, 속도); 

22) 문자열의 특정 문자를 바꾸는 메소드
      문자열.replace("값", "바꿀값");

23)태그의 위치를 바꾸는 방법
    -다음 버튼  ->  첫번째 li를 가장 아래로 이동
         $('선택자').first().appendTo('해당 리스트를 감싸는 부모태그');
         $('선택자:first').appendTo('해당 리스트를 감싸는 부모태그');
    -이전 버튼  -> 가장 아래에 있는 li를 가장 위로 이동
         $('선택자').last().prependTo('해당 리스트를 감싸는 부모태그');
         $('선택자:last').prependTo('해당 리스트를 감싸는 부모태그');

24) 태그의 복제
      -$('선택자').clone();
      -해당 태그를 복제해서 특정태그 아래에 배치
         $('특정태그').after($('복제할태그').clone());

25) 해당 태그의 위쪽 거리를 알고 싶을 때!!!
     $('선택자').offset().top ;

26) 숫자에 첫단위 , 를 붙이는 방법
     - 숫자.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")

27) 해당 페이지로 링크를 걸때.... 변수값을 넘기는 방법
      -변수 1개를 넘기는 방법 -> http://도메인주소.com/파일명.html?변수=값
      -변수 여러개를 넘기는 방법 -> http://도메인주소.com/파일명.html?변수=값&변수=값&변수=값
      
     
----------------------------------------------------------------
<ajax>

-비동기 방식의 처리!!
-전체 페이지의 리로드가 이루어지지 않고 특정 ajax가 적용된 부분만 실시간
  으로 변경/처리 할 수 있다
-파일명.json   / 파일명.xml  
  -> 데이터(자료)가 모여있는 텍스트 파일 
  -> 동적으로 데이터를 가져다 사용할 수 있다
-실시간으로 특정의 html파일을 필요 시에 로드할 수 있다.
-서버에서 동작한다 (클라이언트 에서는 동작되지 않는다)

-jQuery ajax메소드
 1) $('부모태그').load("./파일명.html");  
          -> 파일명.html에 있는 태그를 모두 가져와서 부모태그에 넣어라
     $('부모태그').load("./파일명.html #아이디명"); 
          -> 파일명.html에 있는 해당 아이디의 태그를 가져와서 부모태그에 넣어라 
  2)jQuery의  $.ajax() 메소드 
      $.ajax({
            url: './파일명.json',    //json파일 연결
            dataType: 'json',        //파일 종류
            success: function(data){   //json파일에 연결에 성공하면 자동으로 호출
                  //data 매개변수에 json파일에 있는 모든 객체배열이 자동 저장된다
            }
      });
    

-javascript ajax
   -ajax를 사용해서 가져다 사용할 수 있는 데이터가 저장되어 있는 파일 종류
          -파일명.html   ,   파일명.xml   , 파일명.json (강추)
   -데이터를 가져오는 방법
        -var 객체명 = new XMLHttpRequest();   //Request객체를 생성한다(데이터파일을 가져오는 능력!!)
        -객체명.open('GET', './데이터파일명.확장자', true);      
        -객체명.send(null);
       
       -html을 가져올 때 ->  객체명.responseText;   //데이터 파일에 모든 태그가 담겨있다
       -xml을 가져올 때 ->  객체명.responseXML;   //데이터 파일에 모든 태그가 담겨있다
       -json을 가져올 때 ->  JSON.parse(객체명.responseText);   
                           //객체명.responseText -> 데이터 파일에 모든 태그가 담겨있다
                          //JSON.parse() -> 자바스크립트의 객채배열로 변환한다

   -json파일 만드는 방법 == 객체배열
     <data.json>
      {
          "객체명" : [
                 {속성:값 , 속성:값, 속성:값},
                 {속성:값 , 속성:값, 속성:값},
                 {속성:값 , 속성:값, 속성:값},
           ]
      }

--------------------------------------------------------------------------------







  
 




























     





 









  


 
