<javascript 문법 설명>

-웹브라우저에서 계산하는 웹용 스크립트 언어
-html문서의 어디에서든 위치할 수 있다.
-<script>
     //자바스크립트 코드
 </script>
-<script src="파일명.js"></script>
-대소문자를 구분한다.
-자바스크립트 주석
   - // 한라인 주석
   - /*   여러라인 주석 */
-한라인이 종료되면 (';')으로 처리한다
-----------------------------------------------------------
<자바스크립트의 자료형(data형)>

-스크립트가 처리 할 수 있는 자료(data)의 종류

-String(문자타입) ->  '문자' , "문자"   
                           -> 이스케이프 문자(기능을 가지고 있는 문자) -> '/n'(엔터) ,  '/''(작은따움표출력) , '/"'(큰따움표출력)

-Number(숫자타입) -> 음수/양수/정수/실수   ,    -100   +500  50  35.365

-Boolean(불린/논리값) -> true(참) , false(거짓)

-NaN(Not And Number) -> 오류 메시지 -> 계산할 수 없는 산술연산을 시켰을 때.. 

-undefined  -> 오류 메시지 -> 변수/배열을 선언만 하고 아무값도 대입하지않고 사용할 때!!

-null (널값) -> 아무값도 아닌 값! 없는 값!   
                  -> ''

-object(객체) -> 배열
----------------------------------------------------------
<자바스크립트의 연산자>

-특정의 계산을 하기위한 부호/기호

1)산술연산자
   -수학적 계산을 하기위해 만들어 놓은 연산다
   -(+ - * / %(mod))
   -'%' -> 나눗셈 => 결과로 나머지(mod)값을 취한다. 정수가 결과임
          -> 홀수/짝수/배수를 판별하는 역할 수행
          -> 10%3 -> 1(나머지)
   -우선순위
         ->  '*','/','mod'  > '+','-'  
         -> 우선순위 변경 -> ()   ->   (100+300)/10
   -'-' ,'*' ,'/', '%'  => 산술의 능력 만 가지고 있다
                           -> 문자화된 숫자를 강제로 숫자로 변환해서 사용한다 (강제형변환)
   -'+' => 두가지 능력을 가지고 있다
              ->산술의 능력    ->    100+100=200; -> 2항이 모두 숫자 일때 만 계산
              ->문자의 결합(연결) -> '문자'+'문자'  , '문자'+숫자,  숫자+'문자'

2)비교연산자 / 관계연산자
     -특정의 값을 비교나 관계를 따질 수 있는 연산자
     -결과가 참/거짓으로 판결 -> true(참)  ,  false(거짓)
     - >(크다) , <(작다) , >=(이상) , <=(이하) , ==(같다), !=(다르다)
     - 문자일 경우 >(크다) , <(작다) , >=(이상) , <=(이하) -> 사전식 순서로 따진다  (ㄱ<ㅎ) , (a<z)

3)논리연산자
     -true 와 false 를 계산하는 연산자
     -'&&'(and)  ,  '||'(or) ,  '!'(not)
     -결과가 참/거짓으로 판결 -> true(참)  ,  false(거짓)
     - '!'(not)  -> true->false  , false->true
     -'&&'(and) -> 참참참  (두항이 모두 true일때 만 true)
                      ->  true && true -> true
                      ->  교집합
     -'||'(or) -> 거짓거짓거짓 (두항이 모두 fasle일때 만 false -> 한 항이라도  true면 true)
                     ->  false || false -> false
                     ->  합집합

4)대입연산자
    -'='
    -변수(방) = 값;   -> 우측의 값을 죄측의 방에 담아라~~ 넣어라~~
    -덮어쓰기 -> 이전에 저장된 값을 소멸된다

5)복합연산자
    -대입연산자와 산술연산자가 결합되어 있는 연산자
    -'+=' , '-=' , '*=' , '/=' , '%='
    -num=num+10;  -> num+=10; 
    -num=num-10;  -> num-=10; 
    -num=num*10;  -> num*=10; 
    -num=num/10;  -> num/=10; 
    -num=num%3;  -> num%=3; 

6)증감연산자
    -변수에 값을 1씩 증가/감소 시키는 연산자
    - 변수++(1증가) , 변수--(1감소) -> 후위형!!
    - ++변수(1증가) , --변수(1감소)  -> 전위형!!

*연산자 들의 계산 우선순위
  증감연산자(전위형)  > 산술연산자  > 관계/비교연산자 > 논리연산자 > 대입연산자/복합연산자 > 증감연산자(후위형) 

---------------------------------------------------------
<변수와 배열>

1)변수(값을 저장할 때 사용하는 식별자 입니다.)
     -변하는 값을 저장하는 그릇/방
     -변수명 작명 -> 영문(대/소)/숫자/_ 만 섞어서 만든다. 첫글자는 영문
     -동일한 변수를 생성할 수 없다.
     -변수를 선언(만드는)하는 방법
         -var 변수명;     //빈 방을 만드는 방법
         -var 변수명1 , 변수명2, 변수명3;     //빈 방을 만드는 방법
         -var 변수명=초기값;   //방을 만들고 그 방에 값을 초기화하는 방법
         -var 변수명1=초기값 , 변수명2=초기값, 변수명3=초기값;   //방을 만들고 그 방에 값을 초기화하는 방법
    -var kname = '홍길동';     var number = 300;     var onoff = true;    

2)배열(변수들의 묶음)
   -여러개의 변수를 한번에 만들 수 있다 (변수들의 호텔!!!) 
   -자바스크립트의 배열의 방을 필요시에 추가할 수 있다
   -배열의 각 방에는 서로다른 종류의 값을 담을 수 있다
             -var arr =[100, '홍길동' , true];
   -다양한 배열 선언 방법
         -var 배열명 = [100,200,300,400,500];  -> 배열명[0]=100;  배열명[1]=200; ~ 배열명[4]=500;
         -var 배열명 = [];  //빈 호텔만 건설한다
                        -> 배열명[0]=100;  배열명[1]=200; ~ 배열명[4]=500;
         -var 배열명 = new Array();  //빈 호텔만 건설한다

   -배열명.length;  -> 배열의 방의 총 개수를 알려준다.
   -배열명.pop();  -> 배열의 마지막 방을 제거한다.
   -배열명.push(담을값); -> 배열의 마지막 방을 추가한다.

---------------------------------------------------------
<자바스크립트의 내장함수()>

-alert()함수 ->  메시지를 출력하는 대화상자
                   -> alert(출력하고 싶은 값);
-console.log()함수  -> console창에 출력하는 함수 (오류/에러.. 찾아낼 때)
                              -> console.log(출력하고 싶은 값);
-prompt()함수 -> 사용자에 값(문자)을 입력 받는 대화상자
                      -> var 변수 = prompt('입력메시지', '초기값');
                      -> 확인버튼을 클릭하면 변수에 입력된 값을 저장한다.
-Number()함수 -> 문자화된 숫자를 number 타입으로 변환하는 함수
                        -> Number('100') -> 숫자 100 으로 변환해 준다
-confirm()함수 -> 대화상자를 띄우는 함수 -> 확인(yes)/취소(no)
                        -> 사용자에게 선택권을 부여한다
                        -> 확인->true , 취소->false 를 반환하는 함수
-typeof()함수 -> 특정 값의 종류를 알고 싶을 때 사용하는 함수
                        ->typeof(값/변수);

-parseInt()함수 -> 실수를 정수로 만들어 주는 함수 (소수점 이하를 버리는 함수)
                         -> parseInt(45.333) -> 45 ,  parseInt(45.833) -> 45

-setTimeout()함수 -> 해당 시간이 지연된 후 함수가 자동으로...호출됩니다
                             -> setTimeout(function(){ //처리코드;  } , 지연시간);
                             -> function 함수명(){ //처리코드;  }
                                  setTimeout(함수명 , 지연시간);
                             -> 지연시간 1000(1초)
                             -> 1회만 동작!!

-setInterval()함수  -> 해당 시간이 경과되면 함수가 지속적으로.. 자동 호출됩니다
                             -> setInterval(function(){ //처리코드;  } , 지연시간);
                             -> function 함수명(){ //처리코드;  }
                                  setInterval(함수명 , 지연시간);
                             -> 지연시간 1000(1초)
------------------------------------------------------
<제어문>

1.조건문
2.반복문

1.조건문
  1)if문
      -{}(블럭문) 을 생략할 수 있는데... if문이 참일 때 첫줄(한줄)만 수행문으로 계산 
      -단일 조건문(조건에 참(true)일때 처리하는 방식)
            if(조건절){
                     //조건에 true일 때 처리할 코드
            }
      -양자 택일문(조건에 참일 때 와 거짓일때 각각 처리하는 방식)
            if(조건절){
                    //조건에 true일 때 처리할 코드
            }else{
                   //조건에 false일 때 처리할 코드
            }
      -다중 조건문(조건이 2개 이상일 때)
            if(조건절){
                    //조건에 true일 때 처리할 코드
            }else if(조건절){
                    //조건에 true일 때 처리할 코드
            }else if(조건절){
                    //조건에 true일 때 처리할 코드
            }else if(조건절){
                   //조건에 true일 때 처리할 코드
            }else{
                    //위에있는 모든 조건에 false일 때 처리할 코드
                    //else절은 생략가능
            }
       -중첩 조건문
            -> if문 안에 또 if문을 중첩해서 사용할 수 있다.


   2)switch문
      -다중 조건문 (조건이 2개 이상일 때 사용)

      switch(변수/연산식/값){
            case 값1 : //처리코드 작성;break;
            case 값2 : //처리코드 작성;break;
            case 값3 : //처리코드 작성;break;
            default : //위에 모든 case에 맞지 않았을 때 처리 코드;
      }
     *break; 문을 사용해서 강제로 switch문을 빠져나가게 한다.
     *break; 문이 생략되면 ... 또는(or) -> ||

   *if문과 switch문도 중첩이 가능하다!!!


2.반복문-loop문
   -특정의 반복된 처리를 하기위한 문법

   1)for()문
       -반복 횟수가 정해져있을 때 사용한다
       -for()문 은 배열과 함께 주로 사용한다

       for(var 변수=초기값; 변수<=최종값 ; 증감치){
             //반복해서 처리할 코드
       }

       *배열과 반복문의 콜라보1~~~
        var kname = ['최순실','이순신','강감찬','이소라','장소팔','이장우','백종원'];
        for(var i=0; i<kname.length; i++){
           console.log('이름:'+kname[i]);
        }
       *배열과 반복문의 콜라보2~~~ for in문 (배열전용 반복문)
         for(var 변수 in 배열명){
                //배열처리 코드
          }
          var kname = ['최순실','이순신','강감찬','이소라','장소팔','이장우','백종원'];
          for(var i in kname){
                 console.log('이름:'+kname[i]);
          }      

   2)while()문
          -반복 횟수가 불 명확할 때 사용한다
          -조건절에 true면 반복처리, false면 loop문을 벗어난다
          while(조건절){
                    //반복처리 코드
           }

   3)do~while()문
         -반복 횟수가 불 명확할 때 사용한다
         -조건절에 true면 반복처리, false면 loop문을 벗어난다
           do{
                   //반복처리 코드
            }while(조건절);

   *while()문 / do~while()문 을 사용한 무한 루프
     while(true){
            if(조건절){
                  //처리코드
                  break;  //반복문을 강제로 벗어나게 한다
            }
     }

    *조건절에서의 true(참) / false(거짓)
        -참       ->  true /  1  /  0이 아닌 모든 숫자 / ''(null)이 아닌 모든 문자
        -거짓    ->  false / 0 / '' / null

-----------------------------------------------------------
<사용자 정의 함수*****>

-내장함수 -> 자바스크립트에 내장 되어있는 함수 
-사용자 정의 함수 -> 프로그래머가 필요에 의해 만들어서 사용하는 함수
                            -> 코드의 재사용/ 재활용!!!
                            -> 함수를 선언하면 그 함수안에 있는 코드가 자동으로 계산되지 않는다!!
                            -> 함수는 선언한 후 필요 시... 호출문(call 문)을 사용해서 함수를 동작 시킨다
                            -> 이벤트를 사용하여 함수를 원하는 시점에 호출할 수 있다.

1)기본함수(default)
    function 함수명(){
           //처리코드
    }
    call문 ->  함수명();

2)매개변수를 갖는 함수
    -매개변수-> 함수내에서 만들어진 변수 (var 생략)
    -함수 호출 시 매개변수에 전달되는 값 -> 파라미터(인수/인자)값
    function 함수명(매개변수1, 매개변수2, ......){
           //처리코드
    }
    call문 ->  함수명(값1, 값2, ....);   

3)리턴값을 갖는 함수
     -함수 밖으로 특정의 값을 내보내는(리턴한다) 함수! 
     -함수 밖으로 내보는 값 -> 리턴값
     function 함수명(){
           //처리코드
          return 값;
     }
     var 변수 = 함수명();

4)매개변수와 리턴값을 갖는 함수
     -매개변수 와  리턴값을 모두 가지고 있는 함수
    function 함수명(매개변수1, 매개변수2, ......){
           //처리코드
          return 값;
    }
    call문 ->  var 변수 = 함수명(값1, 값2, ....);   

    -------------------------------------------
<함수를 만드는 다양한 방법>

1)고전적인 방식의 함수
   function 함수명(매개변수1, 매개변수2, ......){
           //처리코드
          return 값;
    }

2)익명함수
    var 함수명 = function(매개변수1, 매개변수2, ......){
           //처리코드
          return 값;
    }
   
3)화살표 함수

-------------------------------------------------------
<함수 사용 시 변수/배열의 사용의 유효범위!!>

1)지역(local)변수(배열)
    -각각의 함수 내에서 만들어진 변수(지역변수)는 그 해당 함수 내에서 만!! 사용할 수 있다 
    -금쪽이(내새끼)!!! 
 
2)전역(global)변수(배열)
    -모든 함수가 함께 사용할 수 있는 공유되는 변수
    -함수 밖에서 만들어진 변수
    -머슴/노예

 *같은 유효범위 에서 동일한 이름의 변수를 만들 수 없다
   그러나 유효범위가 다를 경우에는 동일한 이름의 변수를 만들 수 있다. 
   함수 내에서 우선순위 ->  지역변수 > 전역변수 
---------------------------------------------------------
<객체(object)>
-속성(property)을 가지고 있다(변수/배열)
-메소드(method)를 가지고 있다  == function()/함수()

-해당객체에 속성과 메소드에 접근 하는 방법은 .(dot연산자)  / ['속성명']를 사용한다
     -객체명.속성 = 값;
     -객체명['속성'] = 값;
     -객체명.메소드();

-data(값)를 저장할 때...
      - 변수 -> 하나의 값을 저장하는 방/그릇     ->  var 변수명=값;
      - 배열 -> 여러개의 값을 저장하는 호텔      ->  var 배열명 = [값1, 값2, 값3,....];

-객체를 생성하는 방법
   1)객체에 속성(변수)을 만드는 방법
       var 객체명 = {
             속성1: 초기값,
             속성2: 초기값,
             속성3: 초기값
       }

       객체명.속성1 = 값;
       객체명['속성1'] = 값;

   2)객체에 메소드()/함수()를 만드는 방법
      var 객체명 = {
           속성1:값;
           함수명1:function(){
                     //처리코드
                    //this.속성1  == 객체명.속성1  => 객체 자신이 가지고 있는 속성은 this(나) 키워드를 사용 한다.
           },
           함수명2:function(매개변수1, 매개변수2, ...){
                     //처리코드
                    return 값;
           }
       }

       객체명.함수명1();
       var 변수 = 객체명.함수명2(값1, 값2, ...);

  3)빈 객체를 만드는 방법
       var 객체명 = {};
       var 객체명 = new Object(); 
---------------------------------------------------------------------
<내장 객체>
-이미 자바스크립트에서 만들어 놓은 객체

1)Number객체
   -모든 숫자는 객체다!!!

2)String객체
   -모든 문자는 객체다!!!

3)Array 객체
   -배열는 객체다!!!

4)Date 객체
   -날짜 / 시간 / 요일 을 처리하는 객체
   -var 객체명 = new Date();   //날짜 / 시간 / 요일이 저장된다
        date.getFullYear(); //년도
        date.getMonth()+1;  // 월 (0~11)
        date.getDate(); // 일
        date.getHours();  //시간
        date.getMinutes(); // 분
        date.getSeconds(); //초
        date.getDay(); //요일 1~6(월~토) 0(일요일)

5)Math 객체
   -수학적인 계산/연산을 해주는 객체
   -Math.floor(Math.random()*45+1);  //1~46
--------------------------------------------------
<브라우저 객체 모델>
 
-window객체 (최상위 객체)
      -BOM
            -location 객체->  URL에 대한 정보를 가지고 있는 객체(링크)
            -navigator 객체 ->웹 문서를 실행하고 있는 브라우저에 대한 정보를 가지고 있는 객체
            -history 객체 ->브라우저 방문 기록(history)에 대한 정보를 가지고 있는 객체
            -screen 객체 -> 화면(스크린)에 대한 정보를 가지고 있는 객체 (해상도)
      -DOM
            -document 객체
                  -> HTML DOM은 HTML 구성요소들을 생성, 변경, 추가, 삭제하기 위한 표준

---------------------------------------------------         
<DOM(document Object Model) => 문서객체모델>

-DOM 문법을 사용할 때 주의 사항!!!
     -자바스크립트 코드보다 body태그를 먼저 계산해야한다.
     -자바스크립트는 body태그의 가장 마지막에 프로그래밍을 한다 (추천)
     -<head></head> 태그에 코드를 작성할 때... 
       window.onload=function(){   //body의 태그의 계산이 완료되면!!!
               //DOM 처리 코드
        }

1.태그의 생성/수정
      1) 객체명.innerHTML = '<태그>text</태그>';    //태그의 생성
          객체명.innerHTML = 'text';    //text의 생성
      2) 객체명..innerText = 'text';    //text의 생성

2.요소(태그)의 접근하기 ***
     1)태그 하나를 부르는 방법
           - var 객체명 = document.getElementById('아이디명');  (권장)
           - var 객체명 = document.querySelector('css선택자'); //여러개의 태그일 경우 첫번째 태그만 호출

     2)여러개의 태그를 한꺼번에 부르는 방법
          - var 객체명 = document.getElementsByTagName('태그명');  //여러개의 태그를 리턴한다 (객체가 배열로 처리된다)
          - var 객체명 = document.getElementsByClassName('클래스명');   //여러개의 태그를 리턴한다 (객체가 배열로 처리된다)
          - var 객체명 = document.querySelectorAll('css선택자'); (권장)//여러개의 태그를 리턴한다 (객체가 배열로 처리된다)
                  -객체명[0] , 객체명[1], 객체명[2]

    3)태그의 css속성 조작!!!
          -객체명.style.css속성 = 값;
                -객체명.style.width = '500px';
                -객체명.style.fontSize = '30px';   //  '-'을 사용할 수 없다 -> 카멜표기법 사용 (권장)
                -객체명.style['font-size'] = '30px';   //  [] 연산자를 사용하면 '-'을 사용할 수 있다
   
    4)태그의 속성 조작!!!     
           -객체명.속성 = 값;
               -객체명.src = './images/a1.jpg';
               -객체명.alt = '바꿀 설명글';
               -객체명.href = './sub1/sib1_1.html';

    5)태그를 삭제/제거
               -var 객체명 = document.getElementById('아이디명');
                document.body.removeChild(객체명);

    6)태그에 클래스를 추가/삭제
          -태그에 클래스를 추가 ->   객체명.classList.add('추가할클래스명');
          -태그에 클래스를 삭제 ->   객체명.classList.remove('제거할클래스명');
       
-----------------------------------------------------------------
<이벤트 처리>

-요소(태그)에 이벤트를 바인딩(연결)하는 세가지 방법

1)html 이벤트 핸들러  
   -click , dblclick , mouseover , mouseout => 이벤트
   -onclick , ondblclick , onmouseover , onmouseout => 이벤트핸들러
  
   function 함수명(){  //처리코드   }
   <태그 이벤트핸들러='함수명();'>

2)전통적인 DOM 이벤트 핸들러
    - 객체명.이벤트핸들러 = function(){
              //이벤트 제공 시 처리 코드;
       }

3)DOM 레벨2 이벤트 리스너 (최신문법)
   -  function 함수명(){  //처리코드  }
      객체명.addEventListener('이벤트', 함수명 , false);  //false는 생략 가능

   -  function 함수명(매개변수){  //처리코드  }
      객체명.addEventListener('이벤트', function(){ 함수명(값); } , false);  //false는 생략 가능
   
---------------------------------------------------------------
<객체배열 생성하기>

-선언방법
  var 객체배열명 = [
         {속성1:값, 속성2:값 , 속성3:값},  // 객체배열명[0]
         {속성1:값, 속성2:값 , 속성3:값},  // 객체배열명[1]
         {속성1:값, 속성2:값 , 속성3:값},  // 객체배열명[2]
         {속성1:값, 속성2:값 , 속성3:값}   // 객체배열명[3]
  ];  

   -각 배열의 방안에 객체속성에 접근하는 방법
       -객체배열명[0].속성1     ,객체배열명[0].속성2, 객체배열명[0].속성3
       -객체배열명[1].속성1     ,객체배열명[1].속성2, 객체배열명[1].속성3
       -객체배열명[2].속성1     ,객체배열명[2].속성2, 객체배열명[2].속성3
       -객체배열명[3].속성1     ,객체배열명[3].속성2, 객체배열명[3].속성3

  -배열과 객체배열
    for(var i=0; i>객체배열명.length;i++){
          //객체배열명[i].속성 ;
    }

----------------------------------------------------------
















   




